<project name="SalesforceHybridSDK" default="all">
    <import file="../../../shared/build.xml"/>

    <property environment="env"/>
    <property id="target.name" name="target.name" value="${ant.project.name}"/>
    <property name="project.dir" value=".."/>
    <property name="artifacts.dir" location="artifacts"/>
    <property name="dependency.dir" value="../../dependencies"/>
    <property name="dist.dir" location="../../../dist"/>
      
    <property id="platform.iphoneos" name="platform.iphoneos" value="iphoneos"/>
    <property id="platform.iphonesimulator" name="platform.iphonesimulator" value="iphonesimulator"/>

    <property id="sdk.iphoneos" name="sdk.iphoneos" value="${platform.iphoneos}"/>
    <property id="sdk.iphonesimulator" name="sdk.iphonesimulator" value="${platform.iphonesimulator}"/>

    <property id="configuration.debug" name="configuration.debug" value="Debug"/>
    <property id="configuration.release" name="configuration.release" value="Release"/>

    <!-- main -->
    <target name="pre"
		depends="initArtifacts,ensureDependencies"/>

    <target name="initArtifacts">
        <mkdir dir="${artifacts.dir}"/>
    </target>

	<target name="ensureDependencies"
		depends="iOSShared.dependency.callback-ios, iOSShared.dependency.oauth"
		/>

	<target name="cleanDependencies"
		depends="iOSShared.dependency.callback-ios.clean, iOSShared.dependency.oauth.clean"
		/>
	
    <!-- <target name="all" depends="pre,utest,buildDist" description="do it all"> -->
	<target name="all" depends="pre,buildDist" description="do it all">
   </target>

	<target name="buildDist" depends="pre" description="build debug and release zips">
		<antcall target="compileRelease" />
		<antcall target="compileDebug" />
		<delete dir="${project.dir}/build"/>
	</target>

   <target name="install" depends="pre" description="create fresh install artifacts" >
      <antcall target="compileDebug" />
      <delete dir="${project.dir}/build"/>
   </target>

    <target name="build" description="builds main artifacts"
	depends="pre" >
        <antcall target="compileDebug"/>
        <delete dir="${project.dir}/build"/>
    </target>

    <target name="utest" depends="pre"
	 description="runs unit tests in simulator">
        
        <!-- get the latest iphonesimulator location -->
        <exec executable="xcodebuild" outputproperty="latestSimSDKPath">
            <arg line="xcodebuild -version -sdk iphonesimulator Path"/>
        </exec>
        
        <antcall target="runTestTarget">
            <param name="sdkPath" value="${latestSimSDKPath}" />
            <!-- TODO Test outputs an xml file into its temp dir that we can read -->
            <!-- param name="testFilename" value="TESTS-${testPackage}.xml" /> -->
        </antcall>
    </target>
    
    <target name="runTestTarget" description="build and run test target" >
        <echo message="sdkPath is: ${sdkPath}" />
        <echo message="appTestExecutable is: ${appTestExecutable}" />
        
        <exec executable="mktemp" outputproperty="tmp_home">
            <arg value="-d"/> <!-- create a temp _d_irectory -->
            <arg value="-t"/> <!-- template -->
            <arg value="unittests"/>
        </exec>
        <echo message="Created temp Home at ${tmp_home}"/>
        
        <echo message="Stopping any stale securityd ..."/>
        <exec failonerror="false" executable="launchctl">
            <arg line="remove RunIPhoneLaunchDaemons"/>
        </exec>
        
        <echo message="Starting securityd ... "/>
        <!-- some daemons are necessary for the iPhone to work, e.g. keychain -->
        <exec failonerror="true" executable="launchctl">
            <arg value="submit"/>
            <arg value="-l"/>
            <arg value="RunIPhoneLaunchDaemons"/>
            <arg value="--"/>
            <arg file="${basedir}/RunIPhoneLaunchDaemons.sh"/>
            <arg value="${sdkPath}"/> <!-- $IPHONE_SIMULATOR_ROOT -->
            <arg value="${tmp_home}"/> <!-- $CFFIXED_USER_HOME -->
        </exec>
       
	<delete dir="${artifacts.dir}/BuildProducts" />
	<mkdir dir="${artifacts.dir}/BuildProducts/coverage" />
 
        <!-- build and run the actual test target -->
        <exec executable="xcodebuild" failonerror="false" resultproperty="utestResult" >
            <arg line="-project ${project.dir}/${target.name}.xcodeproj -target TestPlugins -configuration Debug CONFIGURATION_BUILD_DIR=${artifacts.dir}/BuildProducts -sdk iphonesimulator build" />
        </exec>
       		
	<!-- gcda coverage files are now output to i${artifacts.dir}/BuildProducts/coverage -->
	<antcall target="iOSShared.covreport_text">
		<param name="inputPath" value="${artifacts.dir}/BuildProducts/coverage" />
		<param name="outputPath" value="${artifacts.dir}" />
		<param name="rootPath" value="${artifacts.dir}/../.." />
		<param name="excludePattern" value="'.*/SalesforceHybridSDKTests/'" />
	</antcall> 
        <antcall target="iOSShared.covreport">
                <param name="inputPath" value="${artifacts.dir}/BuildProducts/coverage" />
                <param name="outputPath" value="${artifacts.dir}" />
                <param name="rootPath" value="${artifacts.dir}/../.." />
                <param name="excludePattern" value="'.*/SalesforceHybridSDKTests/'" />
        </antcall>


        <!--
         TODO copy the test output file to a report dir
        <copy file="${tmp_home}/Documents/test-reports/junit.xml" tofile="${testReportDir}/${testFilename}" failonerror="false"/>
        <delete dir="${tmp_home}"/>
        -->
        
        <echo message="Stopping securityd ..."/>
        <exec failonerror="true" executable="launchctl">
            <arg line="remove RunIPhoneLaunchDaemons"/>
        </exec>
        
		<!-- verify that the utestResult is zero (no error)
		We do this AFTER stopping securityd, exiting app -->
					
		<fail message="Unit tests failed with error: '${utestResult}'">
			<condition>
				<not>
					<equals arg1="${utestResult}" arg2="0" />
				</not>
			</condition>
		</fail>
    </target>
    
    <target name="compileDebug" depends="pre">
        <antcall target="iOSShared.compile_no_install">
            <param name="configuration" value="${configuration.debug}"/>
            <param name="sdk" refid="sdk.iphoneos"/>
            <param name="target" value="SalesforceHybridSDK"/>
        </antcall>

		<!-- copy the build products somewhere that compress can pick it up -->
		<copy todir="${artifacts.dir}/Debug-iphoneos" >
				<fileset dir="${project.dir}/build/Debug-iphoneos"/>
		</copy>        
    	<delete dir="${project.dir}/build/Debug-iphoneos" failonerror="false" />
					
        <antcall target="iOSShared.compress">
              <param name="destfile" value="${artifacts.dir}/${target.name}-Debug.zip"/>
              <param name="basedir" value="${artifacts.dir}/Debug-iphoneos"/>
        </antcall>
	
		<!-- Copy the zip product to the distribution dir -->
		<copy todir="${dist.dir}/${target.name}"
		    file="${artifacts.dir}/${target.name}-Debug.zip" />
		
    </target>

    <target name="compileRelease" depends="pre" >
	    <antcall target="iOSShared.compile_no_install">
            <param name="configuration" value="${configuration.release}"/>
            <param name="sdk" refid="sdk.iphoneos"/>
            <param name="target" value="SalesforceHybridSDK"/>
        </antcall>

		<!-- copy the build products somewhere that compress can pick it up -->
		<copy todir="${artifacts.dir}/Release-iphoneos" >
			<fileset dir="${project.dir}/build/Release-iphoneos"/>
		</copy>        
    	<delete dir="${project.dir}/build/Release-iphoneos" failonerror="false" />
					
        <antcall target="iOSShared.compress">
            <param name="destfile" value="${artifacts.dir}/${target.name}-Release.zip"/>
            <param name="basedir" value="${artifacts.dir}/Release-iphoneos"/>
        </antcall>

		<!-- Copy the zip product to the distribution dir -->
		<copy todir="${dist.dir}/${target.name}"
		    file="${artifacts.dir}/${target.name}-Release.zip" />
		
    </target>

 
    <target name="clean">
		<delete dir="${project.dir}/build" failonerror="false" />
        <delete dir="${dependency.dir}/${target.name}.framework" failonerror="false" />
        <delete dir="${dist.dir}/${target.name}" failonerror="false" />
        <delete dir="${artifacts.dir}" failonerror="false" />
    </target>

    <target name="clean.full"
        depends="clean, cleanDependencies">
    </target>

</project>
